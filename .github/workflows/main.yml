name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform: [win32, mac, linux]

    runs-on: ${{ matrix.platform == 'win32' && 'windows-latest' || matrix.platform == 'mac' && 'macos-latest' || 'ubuntu-latest' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install electron-builder
      run: npm install electron-builder@latest

    - name: Build App
      run: |
        if [ "${{ matrix.platform }}" == "win32" ]; then
          npm run build:win
        elif [ "${{ matrix.platform }}" == "mac" ]; then
          npm run build:mac
        elif [ "${{ matrix.platform }}" == "linux" ]; then
          npm run build:linux
        fi
      shell: bash
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.platform }}-build
        path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

    - name: Create and Push Tag
      id: create_tag
      run: |
        git tag -d "v${{ env.VERSION }}" || true
        git push --delete origin "v${{ env.VERSION }}" || true
        git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Download Artifacts for Win32
      uses: actions/download-artifact@v3
      with:
        name: win32-build
        path: ./dist/win32

    - name: Download Artifacts for Mac
      uses: actions/download-artifact@v3
      with:
        name: mac-build
        path: ./dist/mac

    - name: Download Artifacts for Linux
      uses: actions/download-artifact@v3
      with:
        name: linux-build
        path: ./dist/linux

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        files: ./dist/**/* # Match all files in all subdirectories
        body_path: ./release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Update CHANGELOG.md
      run: |
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md with compare link for $GITHUB_REF_NAME"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
